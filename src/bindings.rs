/* automatically generated by rust-bindgen 0.57.0 */

pub type size_t = cty::c_ulong;
extern "C" {
    pub fn klee_define_fixed_object(addr: *mut cty::c_void, nbytes: size_t);
}
extern "C" {
    pub fn klee_make_symbolic(addr: *mut cty::c_void, nbytes: size_t, name: *const cty::c_char);
}
extern "C" {
    pub fn klee_range(begin: cty::c_int, end: cty::c_int, name: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn klee_int(name: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn klee_silent_exit(status: cty::c_int);
}
extern "C" {
    pub fn klee_abort();
}
extern "C" {
    pub fn klee_report_error(
        file: *const cty::c_char,
        line: cty::c_int,
        message: *const cty::c_char,
        suffix: *const cty::c_char,
    );
}
extern "C" {
    pub fn klee_get_obj_size(ptr: *mut cty::c_void) -> size_t;
}
extern "C" {
    pub fn klee_print_expr(msg: *const cty::c_char, ...);
}
extern "C" {
    pub fn klee_choose(n: usize) -> usize;
}
extern "C" {
    pub fn klee_is_symbolic(n: usize) -> cty::c_uint;
}
extern "C" {
    pub fn klee_is_replay() -> cty::c_uint;
}
extern "C" {
    pub fn klee_assume(condition: usize);
}
extern "C" {
    pub fn klee_warning(message: *const cty::c_char);
}
extern "C" {
    pub fn klee_warning_once(message: *const cty::c_char);
}
extern "C" {
    pub fn klee_prefer_cex(object: *mut cty::c_void, condition: usize);
}
extern "C" {
    pub fn klee_posix_prefer_cex(object: *mut cty::c_void, condition: usize);
}
extern "C" {
    pub fn klee_mark_global(object: *mut cty::c_void);
}
extern "C" {
    pub fn klee_get_valuef(expr: f32) -> f32;
}
extern "C" {
    pub fn klee_get_valued(expr: f64) -> f64;
}
extern "C" {
    pub fn klee_get_valuel(expr: cty::c_long) -> cty::c_long;
}
extern "C" {
    pub fn klee_get_valuell(expr: cty::c_longlong) -> cty::c_longlong;
}
extern "C" {
    pub fn klee_get_value_i32(expr: i32) -> i32;
}
extern "C" {
    pub fn klee_get_value_i64(expr: i64) -> i64;
}
extern "C" {
    pub fn klee_check_memory_access(address: *const cty::c_void, size: size_t);
}
extern "C" {
    pub fn klee_set_forking(enable: cty::c_uint);
}
extern "C" {
    pub fn klee_stack_trace();
}
extern "C" {
    pub fn klee_print_range(name: *const cty::c_char, arg: cty::c_int);
}
extern "C" {
    pub fn klee_open_merge();
}
extern "C" {
    pub fn klee_close_merge();
}
extern "C" {
    pub fn klee_get_errno() -> cty::c_int;
}
